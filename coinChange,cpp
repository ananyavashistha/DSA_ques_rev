class Solution {
public:
   int helper(int ind,int amt,vector<int> &nums,vector<vector<int>> &dp){
    if(ind<0) return INT_MAX;
    if(amt==0) return 0;
    if(dp[ind][amt]!=-1) return dp[ind][amt];

    int nottake=helper(ind-1,amt,nums,dp);
    int take=INT_MAX;
    if(amt>=nums[ind]){
        int temp=helper(ind,amt-nums[ind],nums,dp);
        if(temp!=INT_MAX) take=1+temp;
    }
    return dp[ind][amt]=min(take,nottake);
}

int coinChange(vector<int> &nums, int amt){
    int n=nums.size();
    vector<vector<int>> dp(n,vector<int> (amt+1,-1));
    int ans=helper(n-1,amt,nums,dp);
    return (ans==INT_MAX)?-1:ans;
}
};
